:PROPERTIES:
:CATEGORY: thunderbird-native-messaging-server
:END:
* note
#+begin_src js

// The user clicked our button, get the active tab in the current window using
// the tabs API.
let tabs = await messenger.tabs.query({ active: true, currentWindow: true });

// Get the message currently displayed in the active tab, using the
// messageDisplay API. Note: This needs the messagesRead permission.
// The returned message is a MessageHeader object with the most relevant
// information.
let message = await messenger.messageDisplay.getDisplayedMessage(tabs[0].id);

// Update the HTML fields with the message subject and sender.
document.getElementById("subject").textContent = message.subject;
document.getElementById("from").textContent = message.author;

// Request the full message to access its full set of headers.
let full = await messenger.messages.getFull(message.id);
// document.getElementById("received").textContent = full.headers.received[0];
document.getElementById("received").textContent = JSON.stringify(message);

// message = 
// {
//    "author" : "Indigo <email@indigo.ca>",
//    "bccList" : [],
//    "ccList" : [],
//    "date" : "2025-05-18T13:46:58.000Z",
//    "external" : false,
//    "flagged" : false,
//    "folder" : {
//       "accountId" : "account6",
//       "id" : "account6://INBOX",
//       "isFavorite" : true,
//       "isRoot" : false,
//       "isTag" : false,
//       "isUnified" : false,
//       "isVirtual" : false,
//       "name" : "Inbox",
//       "path" : "/INBOX",
//       "specialUse" : [
//          "inbox"
//       ],
//       "type" : "inbox"
//    },
//    "headerMessageId" : "20250518094658.39900888.1642936@sailthru.com",
//    "headersOnly" : false,
//    "id" : 42,
//    "junk" : false,
//    "junkScore" : 0,
//    "new" : false,
//    "read" : true,
//    "recipients" : [
//       "thanhvg@gmail.com"
//    ],
//    "size" : 61401,
//    "subject" : "Your Birth Year in Books — See What Was Trending",
//    "tags" : []
// }

// get message by mid
// mark message read
//             messenger.messages.update(messageHeader.id, {
// read: false,
//             });

#+end_src

* arc

td <-> srv <-> client

client 

#+begin_src plantuml :results verbatim
@startuml
participant "client" as client 
participant "server" as srv 
participant "thunderbird" as tb 

client -> srv: GET mid/123
srv -> tb: stdout:\n { type: mid, payload: 123 }
@enduml

#+end_src

#+RESULTS:
#+begin_example
     ,------.           ,------.                    ,-----------.
     |client|           |server|                    |thunderbird|
     `---+--'           `---+--'                    `-----+-----'
         |   GET mid/123    |                             |      
         |----------------->|                             |      
         |                  |                             |      
         |                  |stdout:                      |      
         |                  | { type: mid, payload: 123 } |      
         |                  |---------------------------->|      
     ,---+--.           ,---+--.                    ,-----+-----.
     |client|           |server|                    |thunderbird|
     `------'           `------'                    `-----------'
#+end_example
* problems
- native app manifest must be declared with full path ~/ work work
- thunderbird won't close native app propperly
- python load path is crap must use bash
* update
messagesUpdate
https://webextension-api.thunderbird.net/en/beta-mv2/messages.html#permissions
* emacs
#+begin_src elisp
(defun mu4e/thunderbird-mark-as-read (msg)
  "To set as `mu4e-view-auto-mark-as-read'"
  (message (format "http://localhost:1337/mid/%s" (mu4e-message-field msg :message-id)))
  (url-retrieve
   (format "http://localhost:1337/mid/%s" (mu4e-message-field msg :message-id))
   (lambda (_status) (kill-buffer (current-buffer)))
   nil
   nil)
  t)

(setq mu4e-view-auto-mark-as-read #'mu4e/thunderbird-mark-as-read)
#+end_src

#+RESULTS:
: mu4e/thunderbird-mark-as-read
** getting list of messages
when email list or search is invoked mu4e--server-filter is called. We can use it to query email status from thunderbird

mu4e--server-filter is the core function and is well documented


  "Filter string STR from PROC.
This processes the \"mu server\" output. It accumulates the
strings into valid sexpsv and evaluating those.

The server output is as follows:

   1. an error
      (:error 2 :message \"unknown command\")
      ;; eox
   => passed to `mu4e-error-func'.

   2a. a header exp looks something like:
  (:headers
      ( ;; message 1
        :docid 1585
        :from ((\"Donald Duck\" . \"donald@example.com\"))
        :to ((\"Mickey Mouse\" . \"mickey@example.com\"))
        :subject \"Wicked stuff\"
        :date (20023 26572 0)
        :size 15165
        :references (\"200208121222.g7CCMdb80690@msg.id\")
        :in-reply-to \"200208121222.g7CCMdb80690@msg.id\"
        :message-id \"foobar32423847ef23@pluto.net\"
        :maildir: \"/archive\"
        :path \"/home/mickey/Maildir/inbox/cur/1312_3.32282.pluto,4cd5bd4e9:2,\"
        :priority high
        :flags (new unread)
        :meta <meta-data>
       )
       (  .... more messages  )
)
;; eox
   => this will be passed to `mu4e-headers-append-func'.

  2b. After the list of headers has been returned (see 2a.),
  we'll receive a sexp that looks like
  (:found <n>) with n the number of messages found. The <n> will be
  passed to `mu4e-found-func'.

  3. a view looks like:
  (:view <msg-sexp>)
  => the <msg-sexp> (see 2.) will be passed to `mu4e-view-func'.
     the <msg-sexp> also contains :body-txt and/or :body-html

  4. a database update looks like:
  (:update <msg-sexp> :move <nil-or-t>)
    like :header

   => the <msg-sexp> (see 2.) will be passed to
   `mu4e-update-func', :move tells us whether this is a move to
   another maildir, or merely a flag change.

  5. a remove looks like:
  (:remove <docid>)
  => the docid will be passed to `mu4e-remove-func'

  6. a compose looks like:
  (:compose <reply|forward|edit|new> [:original<msg-sexp>] [:include <attach>])"

mu4e-headers-append-func will do this 


(defun mu4e/thunderbird-headers-append-func (msglst)
  (mu4e~headers-append-handler msglst)


  )



(defun mu4e/collect-unread-message-ids (msglst)
  "Collect the first 10 unread message-ids from MSGLST."
  (let ((unread-ids '())
        (count 0))
    (dolist (msg msglst)
      (when (and (<= count 9)
                 (member 'unread (mu4e-message-field msg :flags)))
        (push (mu4e-message-field msg :message-id) unread-ids)
        (setq count (1+ count))))
    (nreverse unread-ids)))

(defun collect-unread-message-ids (msglst)
  "Collect the first 10 unread message-ids from MSGLST."
  (let ((unread-ids '()))
        (count 0))
    (cl-dolist (msg msglst)
      (when (>= count 10)
        (cl-return)) ; Exit dolist early

      (when (member 'unread (plist-get msg :flags))
        (push (plist-get msg :message-id) unread-ids)
        (setq count (1+ count))))
    (nreverse unread-ids))

** bulk sync to tb
mu4e-mark-execute-all
(run-hook-with-args
                     'mu4e-mark-execute-pre-hook mark msg)
** sync from thunderbird
docid is not
mu4e~headers-update-handler


mu4e-marks

    (read
     :char    ("!" . "◼")
     :prompt "!read"
     :show-target (lambda (target) "read")
     :action (lambda (docid msg target) (mu4e--server-move docid nil "+S-u-N")))

mu4e-mark-execute-all

mu4e-mark-execute-pre-hook to update on mark apply

call this and header lists will update the status

this will be expensive,

thunderbird should support this but it didn't, it would be simple with maildir, append 2.S to the file

take the first 100 unread messages then query against thunderbird for status

#+begin_src elisp
;; with docid
(mu4e--server-move 12320 nil "+S-u-N")
#+end_src

#+begin_src elisp
;; with message-id
(mu4e--server-move "01000196ed6b5302-e2c8f4a9-24af-4f7a-a390-2fbd403ca0ea-000000@email.amazonses.com" nil "+S-u-N")
#+end_src

#+RESULTS:

* DONE query about messages read status
CLOSED: [2025-05-24 Sat 12:29]

#+begin_src plantuml :results verbatim
@startuml
participant "client" as client 
participant "server" as srv 
participant "thunderbird" as tb 

client -> srv: POST /status \n { mids: [123, 345] }
srv -> tb: stdout:\n { type: 'readStatus', payload: [123, 456] }
tb -> srv: stdin:\n { type: 'readStatus', payload: {123: true, 456a: false} }
srv -> client: {123: true, 456: false}
@enduml

#+end_src

#+RESULTS:
#+begin_example
     ,------.                 ,------.                                                  ,-----------.
     |client|                 |server|                                                  |thunderbird|
     `---+--'                 `---+--'                                                  `-----+-----'
         | POST /status           |                                                           |      
         |  { mids: [123, 345] }  |                                                           |      
         |----------------------->|                                                           |      
         |                        |                                                           |      
         |                        |       stdout:                                             |      
         |                        |        { type: 'readStatus', payload: [123, 456] }        |      
         |                        |---------------------------------------------------------->|      
         |                        |                                                           |      
         |                        |stdin:                                                     |      
         |                        | { type: 'readStatus', payload: {123: true, 456a: false} } |      
         |                        |<----------------------------------------------------------|      
         |                        |                                                           |      
         |{123: true, 456: false} |                                                           |      
         |<-----------------------|                                                           |      
     ,---+--.                 ,---+--.                                                  ,-----+-----.
     |client|                 |server|                                                  |thunderbird|
     `------'                 `------'                                                  `-----------'
#+end_example

* verb :verb:
template http://localhost:1337
** mid
GET /mid/foo
** query
POST /query-read-status

{
  "messages": ["foo", "01000196fd573c22-d5eda9aa-75bc-4802-9edb-a8ff9643c412-000000@email.amazonses.com",
  "68306ea9636f7_8a22ab0519830@ip-10-0-88-199.ec2.internal.mail"]
}
*** return

{
  "type": "query_read_status",
  "payload": {
    "type": "query_read_status",
    "payload": {
      "01000196fd573c22-d5eda9aa-75bc-4802-9edb-a8ff9643c412-000000@email.amazonses.com": true,
      "68306ea9636f7_8a22ab0519830@ip-10-0-88-199.ec2.internal.mail": true
    }
  }
}
* manually kill server
kill $(lsof -ti :1337)

echo "hello" > /proc/$(lsof -ti :1337)/fd/0


echo "hello" > /proc/987610/fd/0
